Conditional Operators
Combining Conditional Operators
4 min
We have the ability to expand our boolean expressions by using multiple conditional
operators
Preview: Docs Operators are symbols used to operate on variables and values across different data types.
 in a single expression.

For example:

boolean foo = true && !(false || !true)

Copy to Clipboard

How does an expression like this get evaluated by the compiler? The order of evaluation when it comes to conditional operators is as follows:

Conditions placed in parentheses - ()
NOT - !
AND - &&
OR - ||
Using this information, let’s dissect the expression above to find the value of foo:

true && !(false || !true)

Copy to Clipboard

First, we’ll evaluate (false || !true) because it is enclosed within parentheses. Following the order of evaluation, we will evaluate !true, which equals false:

true && !(false || false)

Copy to Clipboard

Then, we’ll evaluate (false || false) which equals false. Now our expression looks like this:

true && !false

Copy to Clipboard

Next, we’ll evaluate !false because it uses the NOT operator. This expression equals true making our expression the following:

true && true

Copy to Clipboard

true && true evaluates to true; therefore, the value of foo is true.

Instructions
Take a look at the three expressions in Operators.java.

Using your understanding of the order of execution, find out whether the value of each expression is true or false.

When you’re ready, uncomment the print statements to find out if you are right.

